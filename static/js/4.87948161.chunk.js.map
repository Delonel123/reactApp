{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.js","components/Dialogs/Dialogitem/Dialogsitem.jsx","components/Dialogs/Massage/Massage.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","mapStateForRedirect","state","isAuth","auth","withAuthRedire","Component","RedireComponent","this","props","to","React","connect","Dialogitem","path","id","className","s","dialog","active","name","Massage","massage","maxLength","maxLengthCreator","AddMassageFormRudex","reduxForm","form","onSubmit","handleSubmit","Field","validate","requried","placeholder","component","Textarea","Dialogs","dialogsPage","dialogsElement","dialogs","map","d","massagesElement","massages","m","dialogsItems","values","sendMassageCreator","newMassageBody","compose","dispatch"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,YAAc,6BAA6B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,qJCG1PC,EAAsB,SAACC,GACvB,MAAO,CACHC,OAAQD,EAAME,KAAKD,SAIdE,EAAiB,SAACC,GAAe,IACpCC,EADmC,4JAErC,WACI,OAAKC,KAAKC,MAAMN,OAGT,cAACG,EAAD,eAAeE,KAAKC,QAFhB,cAAC,IAAD,CAAUC,GAAG,eAJS,GACXC,IAAML,WAUpC,OADsCM,YAAQX,EAARW,CAA6BL,K,6FCRxDM,EARI,SAACJ,GAChB,IAAIK,EAAO,WAAaL,EAAMM,GAC9B,OACI,qBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACI,cAAC,IAAD,CAAST,GAAII,EAAb,SAAoBL,EAAMW,UCCvBC,EANC,SAACZ,GACb,OACI,qBAAKO,UAAWC,IAAEK,QAAlB,SAA4Bb,EAAMa,W,yCC6BpCC,EAAYC,YAAiB,KAe7BC,EAAsBC,YAAU,CAClCC,KAAM,wBADkBD,EAdL,SAACjB,GAEpB,OACQ,uBAAMmB,SAAUnB,EAAMoB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,SAAU,CAACC,IAAUT,GAAYU,YAAa,qBAAsBb,KAAM,iBAAkBc,UAAWC,QAElH,8BACI,kDASLC,EA1CD,SAAC3B,GACX,IAAIP,EAAQO,EAAM4B,YACdC,EAAiBpC,EAAMqC,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYrB,KAAMqB,EAAErB,KAAiBL,GAAI0B,EAAE1B,IAAZ0B,EAAE1B,OACzE2B,EAAkBxC,EAAMyC,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAStB,QAASsB,EAAEtB,SAAcsB,EAAE7B,OAMlF,OAAKN,EAAMN,OAIP,sBAAKa,UAAWC,IAAEsB,QAAlB,UACI,qBAAKvB,UAAWC,IAAE4B,aAAlB,SACKP,IAEL,qBAAKtB,UAAWC,IAAE4B,aAAlB,SACKH,IAED,cAACjB,EAAD,CAAqBG,SAdb,SAACkB,GACjBrC,EAAMsC,mBAAmBD,EAAOE,sBAGzB,cAAC,IAAD,CAAUtC,GAAG,Y,yBCAbuC,sBACXrC,aAdkB,SAACV,GACnB,MAAO,CACHmC,YAAanC,EAAMmC,gBAIF,SAACa,GACtB,MAAO,CACHH,mBAAoB,SAACC,GAAqBE,EAASH,YAAmBC,SAO1E3C,IAFW4C,CAGbb","file":"static/js/4.87948161.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2gQcE\",\"dialogsItems\":\"Dialogs_dialogsItems__2STJe\",\"dialogItems\":\"Dialogs_dialogItems__1pYoy\",\"active\":\"Dialogs_active__2ofTS\",\"dialog\":\"Dialogs_dialog__38fNd\",\"massages\":\"Dialogs_massages__2gJKF\",\"massage\":\"Dialogs_massage__3SwkF\"};","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nlet mapStateForRedirect = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n        \r\n    }\r\n}\r\nexport const withAuthRedire = (Component) => {\r\n    class RedireComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) {\r\n                return <Redirect to=\"/Login\" />\r\n            }\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n    let ConnecredAuthRedirectComponents = connect(mapStateForRedirect)(RedireComponent)\r\n    return ConnecredAuthRedirectComponents\r\n}","import { NavLink } from 'react-router-dom'\r\nimport s from './../Dialogs.module.css'\r\nimport React from 'react'\r\n\r\nconst Dialogitem = (props) => {\r\n    let path = \"/dialog/\" + props.id\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\nexport default Dialogitem","import s from './../Dialogs.module.css'\r\nimport React from 'react'\r\n\r\nconst Massage = (props) => {\r\n    return (\r\n        <div className={s.massage}>{props.massage}</div>\r\n       \r\n    )\r\n}\r\nexport default Massage","import Dialogitem from './Dialogitem/Dialogsitem'\r\nimport Massage from './Massage/Massage'\r\nimport s from './Dialogs.module.css'\r\nimport React from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport { Textarea } from '../common/FormsControle/FormsControls'\r\nimport { maxLengthCreator, requried } from '../../utils/validators/validators'\r\n\r\n\r\nlet Dialogs = (props) => {\r\n    let state = props.dialogsPage\r\n    let dialogsElement = state.dialogs.map(d => <Dialogitem name={d.name} key={d.id} id={d.id} />)\r\n    let massagesElement = state.massages.map(m => <Massage massage={m.massage} key={m.id} />\r\n    )\r\n\r\n    let addNewMassage = (values) => {\r\n        props.sendMassageCreator(values.newMassageBody)\r\n    }\r\n    if (!props.isAuth) {\r\n        return <Redirect to=\"/Login\" />\r\n    }\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElement}\r\n            </div>\r\n            <div className={s.dialogsItems}>\r\n                {massagesElement}\r\n            </div>\r\n                <AddMassageFormRudex onSubmit={addNewMassage} />\r\n        </div>\r\n    )\r\n}\r\nconst maxLength = maxLengthCreator(100)\r\nconst addMassageForm = (props) => {\r\n\r\n    return (\r\n            <form onSubmit={props.handleSubmit}>\r\n                <div>\r\n                    <Field validate={[requried, maxLength]} placeholder={\"Enter your massage\"} name={\"newMassageBody\"} component={Textarea} />\r\n                </div>\r\n                <div>\r\n                    <button>Send</button>\r\n                </div>\r\n            </form>\r\n    )\r\n}\r\n\r\nconst AddMassageFormRudex = reduxForm({\r\n    form: 'dialogAddMassageForm'\r\n})(addMassageForm)\r\nexport default Dialogs","import { sendMassageCreator } from '../../redux/dialogs-reducer'\r\nimport Dialogs from './Dialogs'\r\nimport { connect } from 'react-redux'\r\nimport { withAuthRedire } from '../../hoc/withAuthRedirect'\r\nimport { compose } from 'redux'\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMassageCreator: (newMassageBody) => { dispatch(sendMassageCreator(newMassageBody)) }\r\n\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedire,\r\n)(Dialogs)"],"sourceRoot":""}