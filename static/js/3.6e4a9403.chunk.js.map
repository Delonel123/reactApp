{"version":3,"sources":["hoc/withAuthRedirect.js","components/Profile/ProfileInfo/Profileinfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/ProfileInfo/ProfileStatusWithHocks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/Profileinfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["mapStateForRedirect","state","isAuth","auth","withAuthRedire","Component","RedireComponent","this","props","to","React","connect","module","exports","Post","className","s","item","message","logo","likeCount","maxLength10","maxLengthCreator","MyPosts","postsElement","posts","map","p","massage","id","postsBlock","MyPostReduxForm","onSubmit","values","addPost","newPostText","PureComponent","reduxForm","form","handleSubmit","Field","validate","requried","component","Textarea","placeholder","name","MyPostsContainer","profilePage","dispatch","newPost","addPostActionCreator","ProfileStatusWithHocks","useState","editMode","setEditMode","status","setStatus","useEffect","onChange","e","text","currentTarget","value","onBlur","updateStatus","autoFocus","onDoubleClick","ProfileDataReduxForm","onClick","goToEditMode","error","createField","Input","type","Object","keys","profile","contacts","key","ProfileData","isOwner","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","Profileinfo","Preloader","descriptionBlock","src","photos","large","userPhoto","photo","target","files","length","savePhoto","initialValues","formData","saveProfile","then","Profile","store","ProfileContainer","userId","match","params","autorizedUserId","history","push","getUsersProfile","getStatus","refreshProfile","prevProps","compose","userID","withRouter"],"mappings":"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","file":"static/js/3.6e4a9403.chunk.js","sourcesContent":["import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nlet mapStateForRedirect = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n        \r\n    }\r\n}\r\nexport const withAuthRedire = (Component) => {\r\n    class RedireComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) {\r\n                return <Redirect to=\"/Login\" />\r\n            }\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n    let ConnecredAuthRedirectComponents = connect(mapStateForRedirect)(RedireComponent)\r\n    return ConnecredAuthRedirectComponents\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"Profileinfo_descriptionBlock__35pU-\",\"photo\":\"Profileinfo_photo__18j4s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1K_sp\",\"posts\":\"MyPosts_posts__Hw2cS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1KSjZ\",\"wrapper\":\"Post_wrapper__3t_mE\"};","import s from './Post.module.css'\r\nimport React from 'react'\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            {props.message}\r\n            <div className={s.logo}>\r\n                <span>{props.likeCount}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Post","import s from './MyPosts.module.css'\r\nimport Post from './Post/Post'\r\nimport React from 'react'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport { maxLengthCreator, requried } from '../../../utils/validators/validators'\r\nimport { Textarea } from '../../common/FormsControle/FormsControls'\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nclass MyPosts extends React.PureComponent {\r\n\r\n    render() {\r\n        let onaddMassame = (values) => {\r\n            this.props.addPost(values.newPostText);\r\n\r\n        }\r\n        let postsElement = this.props.posts.map(p => <Post message={p.massage} likeCount={p.likeCount} key={p.id} />)\r\n        return (\r\n            <div className={s.postsBlock}>\r\n                <h3>mypost</h3>\r\n                <div>\r\n                    <MyPostReduxForm onSubmit={onaddMassame} />\r\n                </div>\r\n                <div className={s.posts}>\r\n                    {postsElement}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst AddNewPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field validate={[requried, maxLength10]} component={Textarea} placeholder={\"add post\"} name={\"newPostText\"} />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst MyPostReduxForm = reduxForm({\r\n    form: 'ProfileAddNewPostForm'\r\n})(AddNewPostForm)\r\nexport default MyPosts","import { addPostActionCreator } from '../../../redux/profile-reducer';\r\nimport MyPosts from './MyPosts';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPost) => {\r\n            dispatch(addPostActionCreator(newPost))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\nexport default MyPostsContainer","import s from './Profileinfo.module.css'\r\nimport React from 'react'\r\nimport Profile from '../Profile'\r\nimport Preloader from '../../common/Preloader/Preloader'\r\nimport { useState } from 'react'\r\nimport { useEffect } from 'react'\r\n\r\n\r\nconst ProfileStatusWithHocks = (props) => {\r\n    let [editMode,setEditMode] = useState(true)\r\n    let [status,setStatus] = useState(props.status)\r\n\r\n    useEffect ( () =>{\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () =>{\r\n        setEditMode(false);\r\n    }\r\n    const deActivateEditMode = () =>{\r\n        setEditMode(true)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e) =>{\r\n        let text = e.currentTarget.value;\r\n        setStatus(text) \r\n    }\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} onBlur={deActivateEditMode} autoFocus={true} value={status}></input>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n               <b>Status: </b> <span onDoubleClick={activateEditMode} > {props.status || \"No status\"}</span>\r\n            </div>\r\n            }\r\n        </div >\r\n    )\r\n}\r\nexport default ProfileStatusWithHocks","import { reduxForm } from \"redux-form\"\r\nimport { createField, Input, Textarea } from \"../../common/FormsControle/FormsControls\"\r\n\r\nconst ProfileDataForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <button onClick={props.goToEditMode}>Save</button>\r\n                {props.error && <div>\r\n                {props.error}\r\n            </div>}\r\n            </div>\r\n            <div>\r\n                <b>Full name: </b> <div>{createField(\"Full name\", \"fullName\", [], Input)}</div>\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job </b> <div>{createField(\"\", \"lookingForAJob\", [], Input, { type: \"checkbox\" })}</div>\r\n            </div>\r\n\r\n            <div>\r\n            </div>\r\n            <div>\r\n                <b>My professuibal skils </b> <div>{createField(\"lookingForAJobDescription\", \"lookingForAJobDescription\", [], Textarea)}</div>\r\n            </div>\r\n\r\n            <div>\r\n                <b>About me: </b> <div>{createField(\"About me\", \"aboutMe\", [], Textarea)}</div>\r\n            </div>\r\n            <div><b>Contacts: </b> {Object.keys(props.profile.contacts).map(key => {\r\n                return (\r\n                    <div key={key}>\r\n                        <b>{key}: {createField(key, \"contacts.\" + key, [], Input)}</b>\r\n                    </div>\r\n                )\r\n            })} </div>\r\n        </form>\r\n    )\r\n}\r\nconst ProfileDataReduxForm = reduxForm({\r\n    form: 'editProfile'\r\n})(ProfileDataForm)\r\nexport default ProfileDataReduxForm","import s from './Profileinfo.module.css'\r\nimport React from 'react'\r\nimport Preloader from '../../common/Preloader/Preloader'\r\nimport ProfileStatusWithHocks from './ProfileStatusWithHocks'\r\nimport userPhoto from '../../../assets/images/user.jpg'\r\nimport { useState } from 'react'\r\nimport ProfileDataForm from './ProfileDataForm'\r\nconst Profileinfo = (props) => {\r\n    const [editMode,setEditMode] = useState(false);\r\n    if (!props.profile) {\r\n        return <Preloader />\r\n    }\r\n    const onMainphotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n\r\n    }\r\n    const onSubmit = (formData) =>{\r\n        props.saveProfile(formData).then(\r\n            () =>{\r\n                setEditMode(false)\r\n            }\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <div>\r\n                    <img src={props.profile.photos.large || userPhoto} className={s.photo} />\r\n                    {props.isOwner && <input type={\"file\"} onChange={onMainphotoSelected}></input>}\r\n                    {editMode ? <ProfileDataForm profile = {props.profile} initialValues={props.profile} onSubmit = {onSubmit}/> : <ProfileData goToEditMode={() => setEditMode(true) }  profile = {props.profile} isOwner={props.isOwner}/>}\r\n                </div>\r\n                <ProfileStatusWithHocks status={props.status} updateStatus={props.updateStatus} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ProfileData = (props) => {\r\n    return (\r\n        <div>\r\n            <div>\r\n                {props.isOwner && <button onClick={props.goToEditMode}>Edit</button>}\r\n            </div>\r\n            <div>\r\n                <b>Full name: </b>{props.profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job:</b> {props.profile.lookingForAJob ? \"Yes\" : \"No\"}\r\n            </div>\r\n            {props.profile.lookingForAJob &&\r\n                <div>\r\n                    <b>My professuibal skils: </b>{props.profile.lookingForAJobDescription}\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>About me: </b>{props.profile.aboutMe}\r\n            </div>\r\n            <div><b>Contacts: </b> {Object.keys(props.profile.contacts).map(key => {\r\n                return <Contact key={key} contactTitle={key} contactValue={props.profile.contacts[key]} />\r\n            })} </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nconst Contact = (props) => {\r\n    return (\r\n        <div> <b>{props.contactTitle}</b>: {props.contactValue} </div>\r\n    )\r\n}\r\n\r\nexport default Profileinfo","import MyPostsContainer from './MyPosts/MyPostsContainer'\r\nimport Profileinfo from './ProfileInfo/Profileinfo'\r\nimport React from 'react'\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <Profileinfo saveProfile = {props.saveProfile} savePhoto = {props.savePhoto} isOwner ={props.isOwner} profile ={props.profile} status = {props.status} updateStatus = {props.updateStatus} />\r\n            <MyPostsContainer store={props.store}/> \r\n        </div>\r\n    )\r\n}\r\nexport default Profile","import React from 'react'\r\nimport Profile from './Profile'\r\nimport { connect } from 'react-redux'\r\nimport { withRouter } from 'react-router-dom'\r\nimport { getStatus, getUsersProfile, savePhoto, saveProfile, updateStatus } from '../../redux/profile-reducer'\r\nimport { withAuthRedire } from '../../hoc/withAuthRedirect'\r\nimport { compose } from 'redux'\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n\r\n            userId = this.props.autorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUsersProfile(userId);\r\n        this.props.getStatus(userId)\r\n    }\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) this.refreshProfile()\r\n    }\r\n    render() {\r\n        return (\r\n            <Profile {...this.props} isOwner = {!this.props.match.params.userId} profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus} savePhoto = {this.props.savePhoto} />\r\n        )\r\n    }\r\n}\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    autorizedUserId: state.auth.userID,\r\n    isAuth: state.auth.isAuth\r\n})\r\nexport default compose(\r\n    connect(mapStateToProps, { getUsersProfile, getStatus, updateStatus, savePhoto,saveProfile }),\r\n    withRouter,\r\n)(ProfileContainer)"],"sourceRoot":""}